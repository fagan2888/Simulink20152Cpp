//
// File: sf_launchabort.cpp
//
// Code generated for Simulink model 'sf_launchabort'.
//
// Model version                  : 1.211
// Simulink Coder version         : 8.8 (R2015a) 09-Feb-2015
// C/C++ source code generated on : Sun Jul 26 22:33:13 2015
//
// Target selection: ert.tlc
// Embedded hardware selection: 32-bit Generic
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "sf_launchabort.h"
#include "sf_launchabort_private.h"

static void rate_scheduler(RT_MODEL *const M);

//
//   This function updates active task flag for each subrate.
// The function is called at model base rate, hence the
// generated code self-manages all its subrates.
//
static void rate_scheduler(RT_MODEL *const M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (M->Timing.TaskCounters.TID[2])++;
  if ((M->Timing.TaskCounters.TID[2]) > 9) {// Sample time: [1.0s, 0.0s]
    M->Timing.TaskCounters.TID[2] = 0;
  }
}

//
// Initial conditions for enable system:
//    '<S5>/FuelDump'
//    '<S5>/StageRelease'
//
void FuelDump_Init(rtDW_FuelDump *localDW, rtP_FuelDump *localP)
{
  // InitializeConditions for UnitDelay: '<S8>/Unit Delay'
  localDW->UnitDelay_DSTATE = localP->UnitDelay_InitialCondition;
}

//
// Start for enable system:
//    '<S5>/FuelDump'
//    '<S5>/StageRelease'
//
void FuelDump_Start(rtB_FuelDump *localB, rtDW_FuelDump *localDW, rtP_FuelDump
                    *localP)
{
  // InitializeConditions for Enabled SubSystem: '<S5>/FuelDump'
  FuelDump_Init(localDW, localP);

  // End of InitializeConditions for SubSystem: '<S5>/FuelDump'

  // VirtualOutportStart for Outport: '<S8>/Out2'
  localB->UnitDelay = localP->Out2_Y0;
}

//
// Output and update for enable system:
//    '<S5>/FuelDump'
//    '<S5>/StageRelease'
//
void FuelDump(boolean_T rtu_Enable, rtB_FuelDump *localB, rtDW_FuelDump *localDW,
              rtP_FuelDump *localP)
{
  // Outputs for Enabled SubSystem: '<S5>/FuelDump' incorporates:
  //   EnablePort: '<S8>/Enable'

  if (rtu_Enable) {
    // UnitDelay: '<S8>/Unit Delay'
    localB->UnitDelay = localDW->UnitDelay_DSTATE;

    // Update for UnitDelay: '<S8>/Unit Delay' incorporates:
    //   Constant: '<S8>/Constant1'
    //   Sum: '<S8>/Sum'

    localDW->UnitDelay_DSTATE = localP->Constant1_Value + localB->UnitDelay;
  }

  // End of Outputs for SubSystem: '<S5>/FuelDump'
}

// Initial conditions for enable system: '<S5>/TankRelease'
void TankRelease_Init(rtDW_TankRelease *localDW, rtP_TankRelease *localP)
{
  // InitializeConditions for UnitDelay: '<S10>/Unit Delay'
  localDW->UnitDelay_DSTATE = localP->UnitDelay_InitialCondition;
}

// Start for enable system: '<S5>/TankRelease'
void TankRelease_Start(rtB_TankRelease *localB, rtDW_TankRelease *localDW,
  rtP_TankRelease *localP)
{
  // InitializeConditions for Enabled SubSystem: '<S5>/TankRelease'
  TankRelease_Init(localDW, localP);

  // End of InitializeConditions for SubSystem: '<S5>/TankRelease'

  // VirtualOutportStart for Outport: '<S10>/Out1'
  localB->UnitDelay = localP->Out1_Y0;
}

// Output and update for enable system: '<S5>/TankRelease'
void TankRelease(boolean_T rtu_Enable, rtB_TankRelease *localB, rtDW_TankRelease
                 *localDW, rtP_TankRelease *localP)
{
  // Outputs for Enabled SubSystem: '<S5>/TankRelease' incorporates:
  //   EnablePort: '<S10>/Enable'

  if (rtu_Enable) {
    // UnitDelay: '<S10>/Unit Delay'
    localB->UnitDelay = localDW->UnitDelay_DSTATE;

    // Update for UnitDelay: '<S10>/Unit Delay' incorporates:
    //   Constant: '<S10>/Constant'
    //   Sum: '<S10>/Sum'

    localDW->UnitDelay_DSTATE = localP->Constant_Value + localB->UnitDelay;
  }

  // End of Outputs for SubSystem: '<S5>/TankRelease'
}

// Model step function
void sf_launchabortModelClass::step()
{
  // local block i/o variables
  real_T rtb_ManualSwitch;
  real_T rtb_ProtectedRT;
  real_T rtb_ProtectedRT1;
  boolean_T rtb_HiddenBuf_InsertedFor_Stage;
  boolean_T rtb_HiddenBuf_InsertedFor_FuelD;
  boolean_T rtb_HiddenBuf_InsertedFor_TankR;

  // FromWorkspace: '<S3>/FromWs'
  {
    real_T *pDataValues = (real_T *) DWork.FromWs_PWORK.DataPtr;
    real_T *pTimeValues = (real_T *) DWork.FromWs_PWORK.TimePtr;
    int_T currTimeIndex = DWork.FromWs_IWORK.PrevIndex;
    real_T t = (&M)->Timing.t[0];

    // Get index
    if (t <= pTimeValues[0]) {
      currTimeIndex = 0;
    } else if (t >= pTimeValues[275]) {
      currTimeIndex = 274;
    } else {
      if (t < pTimeValues[currTimeIndex]) {
        while (t < pTimeValues[currTimeIndex]) {
          currTimeIndex--;
        }
      } else {
        while (t >= pTimeValues[currTimeIndex + 1]) {
          currTimeIndex++;
        }
      }
    }

    DWork.FromWs_IWORK.PrevIndex = currTimeIndex;

    // Post output
    {
      real_T t1 = pTimeValues[currTimeIndex];
      real_T t2 = pTimeValues[currTimeIndex + 1];
      if (t1 == t2) {
        if (t < t1) {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 6; ++elIdx) {
              (&B.FromWs[0])[elIdx] = pDataValues[currTimeIndex];
              pDataValues += 276;
            }
          }
        } else {
          {
            int_T elIdx;
            for (elIdx = 0; elIdx < 6; ++elIdx) {
              (&B.FromWs[0])[elIdx] = pDataValues[currTimeIndex + 1];
              pDataValues += 276;
            }
          }
        }
      } else {
        real_T f1 = (t2 - t) / (t2 - t1);
        real_T f2 = 1.0 - f1;
        real_T d1;
        real_T d2;
        int_T TimeIndex= currTimeIndex;

        {
          int_T elIdx;
          for (elIdx = 0; elIdx < 6; ++elIdx) {
            d1 = pDataValues[TimeIndex];
            d2 = pDataValues[TimeIndex + 1];
            (&B.FromWs[0])[elIdx] = (real_T) rtInterpolate(d1, d2, f1, f2);
            pDataValues += 276;
          }
        }
      }
    }
  }

  // SignalConversion: '<Root>/TmpSignal ConversionAtVR SinkInport1' incorporates:
  //   Constant: '<S7>/rotVector'

  B.TmpSignalConversionAtVRSinkInpo[0] = P.rotVector_Value[0];
  B.TmpSignalConversionAtVRSinkInpo[1] = P.rotVector_Value[1];
  B.TmpSignalConversionAtVRSinkInpo[2] = P.rotVector_Value[2];
  B.TmpSignalConversionAtVRSinkInpo[3] = B.FromWs[0];

  // SignalConversion: '<Root>/TmpSignal ConversionAtVR SinkInport3' incorporates:
  //   Constant: '<S6>/rotVector'

  B.TmpSignalConversionAtVRSinkIn_p[0] = P.rotVector_Value_b[0];
  B.TmpSignalConversionAtVRSinkIn_p[1] = P.rotVector_Value_b[1];
  B.TmpSignalConversionAtVRSinkIn_p[2] = P.rotVector_Value_b[2];
  B.TmpSignalConversionAtVRSinkIn_p[3] = B.FromWs[1];

  // RateTransition: '<Root>/Protected RT'
  if (!(DWork.ProtectedRT_semaphoreTaken != 0)) {
    DWork.ProtectedRT_Buffer0 = B.FromWs[4];
  }

  if ((&M)->Timing.TaskCounters.TID[2] == 0) {
    DWork.ProtectedRT_semaphoreTaken = 1;
    rtb_ProtectedRT = DWork.ProtectedRT_Buffer0;
    DWork.ProtectedRT_semaphoreTaken = 0;
  }

  // End of RateTransition: '<Root>/Protected RT'

  // RateTransition: '<Root>/Protected RT1'
  if (!(DWork.ProtectedRT1_semaphoreTaken != 0)) {
    DWork.ProtectedRT1_Buffer0 = B.FromWs[5];
  }

  if ((&M)->Timing.TaskCounters.TID[2] == 0) {
    DWork.ProtectedRT1_semaphoreTaken = 1;
    rtb_ProtectedRT1 = DWork.ProtectedRT1_Buffer0;
    DWork.ProtectedRT1_semaphoreTaken = 0;

    // Chart: '<Root>/launchAbortController'
    launchAbortController(rtb_ProtectedRT, rtb_ProtectedRT1,
                          &B.sf_launchAbortController,
                          &DWork.sf_launchAbortController);

    // SignalConversion: '<S5>/HiddenBuf_InsertedFor_StageRelease_at_inport_0'
    rtb_HiddenBuf_InsertedFor_Stage = B.sf_launchAbortController.releaseStage;

    // Outputs for Enabled SubSystem: '<S5>/StageRelease'
    FuelDump(rtb_HiddenBuf_InsertedFor_Stage, &B.StageRelease,
             &DWork.StageRelease, (rtP_FuelDump *)&P.StageRelease);

    // End of Outputs for SubSystem: '<S5>/StageRelease'

    // Gain: '<S2>/Gain'
    B.Gain[0] = P.Gain_Gain[0] * B.StageRelease.UnitDelay;
    B.Gain[1] = P.Gain_Gain[1] * B.StageRelease.UnitDelay;
    B.Gain[2] = P.Gain_Gain[2] * B.StageRelease.UnitDelay;

    // SignalConversion: '<S5>/HiddenBuf_InsertedFor_FuelDump_at_inport_0'
    rtb_HiddenBuf_InsertedFor_FuelD = B.sf_launchAbortController.dumpFuel;

    // Outputs for Enabled SubSystem: '<S5>/FuelDump'
    FuelDump(rtb_HiddenBuf_InsertedFor_FuelD, &B.FuelDump_f, &DWork.FuelDump_f,
             (rtP_FuelDump *)&P.FuelDump_f);

    // End of Outputs for SubSystem: '<S5>/FuelDump'

    // Gain: '<S2>/Gain2'
    B.Gain2[0] = P.Gain2_Gain[0] * B.FuelDump_f.UnitDelay;
    B.Gain2[1] = P.Gain2_Gain[1] * B.FuelDump_f.UnitDelay;
    B.Gain2[2] = P.Gain2_Gain[2] * B.FuelDump_f.UnitDelay;

    // SignalConversion: '<S5>/HiddenBuf_InsertedFor_TankRelease_at_inport_0'
    rtb_HiddenBuf_InsertedFor_TankR = B.sf_launchAbortController.releaseTanks;

    // Outputs for Enabled SubSystem: '<S5>/TankRelease'
    TankRelease(rtb_HiddenBuf_InsertedFor_TankR, &B.TankRelease_m,
                &DWork.TankRelease_m, (rtP_TankRelease *)&P.TankRelease_m);

    // End of Outputs for SubSystem: '<S5>/TankRelease'

    // Gain: '<S2>/Gain1'
    B.Gain1[0] = P.Gain1_Gain[0] * B.TankRelease_m.UnitDelay;
    B.Gain1[1] = P.Gain1_Gain[1] * B.TankRelease_m.UnitDelay;
    B.Gain1[2] = P.Gain1_Gain[2] * B.TankRelease_m.UnitDelay;
  }

  // End of RateTransition: '<Root>/Protected RT1'

  // ManualSwitch: '<Root>/Manual Switch' incorporates:
  //   Constant: '<Root>/Markers Off'
  //   Constant: '<Root>/Markers On'

  if (P.ManualSwitch_CurrentSetting == 1) {
    rtb_ManualSwitch = P.MarkersOn_Value;
  } else {
    rtb_ManualSwitch = P.MarkersOff_Value;
  }

  // End of ManualSwitch: '<Root>/Manual Switch'
  if ((&M)->Timing.TaskCounters.TID[2] == 0) {
    // Switch: '<Root>/Switch' incorporates:
    //   Constant: '<Root>/Blue'
    //   Constant: '<Root>/Red'

    if (rtb_ProtectedRT1 != 0.0) {
      B.Switch[0] = P.Red_Value[0];
      B.Switch[1] = P.Red_Value[1];
      B.Switch[2] = P.Red_Value[2];
    } else {
      B.Switch[0] = P.Blue_Value[0];
      B.Switch[1] = P.Blue_Value[1];
      B.Switch[2] = P.Blue_Value[2];
    }

    // End of Switch: '<Root>/Switch'
  }

  if ((&M)->Timing.TaskCounters.TID[2] == 0) {
  }

  // Update absolute time for base rate
  // The "clockTick0" counts the number of times the code of this task has
  //  been executed. The absolute time is the multiplication of "clockTick0"
  //  and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
  //  overflow during the application lifespan selected.

  (&M)->Timing.t[0] =
    (++(&M)->Timing.clockTick0) * (&M)->Timing.stepSize0;

  {
    // Update absolute timer for sample time: [0.1s, 0.0s]
    // The "clockTick1" counts the number of times the code of this task has
    //  been executed. The resolution of this integer timer is 0.1, which is the step size
    //  of the task. Size of "clockTick1" ensures timer will not overflow during the
    //  application lifespan selected.

    (&M)->Timing.clockTick1++;
  }

  rate_scheduler((&M));
}

// Model initialize function
void sf_launchabortModelClass::initialize()
{
  // Registration code

  // initialize real-time model
  (void) memset((void *)(&M), 0,
                sizeof(RT_MODEL));

  {
    // Setup solver object
    rtsiSetSimTimeStepPtr(&(&M)->solverInfo, &(&M)->Timing.simTimeStep);
    rtsiSetTPtr(&(&M)->solverInfo, &rtmGetTPtr((&M)));
    rtsiSetStepSizePtr(&(&M)->solverInfo, &(&M)->Timing.stepSize0);
    rtsiSetErrorStatusPtr(&(&M)->solverInfo, ((const char_T **)
      (&rtmGetErrorStatus((&M)))));
    rtsiSetRTModelPtr(&(&M)->solverInfo, (&M));
  }

  rtsiSetSimTimeStep(&(&M)->solverInfo, MAJOR_TIME_STEP);
  rtsiSetSolverName(&(&M)->solverInfo,"FixedStepDiscrete");
  rtmSetTPtr((&M), &(&M)->Timing.tArray[0]);
  (&M)->Timing.stepSize0 = 0.1;

  // block I/O
  (void) memset(((void *) &B), 0,
                sizeof(BlockIO));

  {
    int32_T i;
    for (i = 0; i < 6; i++) {
      B.FromWs[i] = 0.0;
    }

    B.TmpSignalConversionAtVRSinkInpo[0] = 0.0;
    B.TmpSignalConversionAtVRSinkInpo[1] = 0.0;
    B.TmpSignalConversionAtVRSinkInpo[2] = 0.0;
    B.TmpSignalConversionAtVRSinkInpo[3] = 0.0;
    B.TmpSignalConversionAtVRSinkIn_p[0] = 0.0;
    B.TmpSignalConversionAtVRSinkIn_p[1] = 0.0;
    B.TmpSignalConversionAtVRSinkIn_p[2] = 0.0;
    B.TmpSignalConversionAtVRSinkIn_p[3] = 0.0;
    B.Gain[0] = 0.0;
    B.Gain[1] = 0.0;
    B.Gain[2] = 0.0;
    B.Gain2[0] = 0.0;
    B.Gain2[1] = 0.0;
    B.Gain2[2] = 0.0;
    B.Gain1[0] = 0.0;
    B.Gain1[1] = 0.0;
    B.Gain1[2] = 0.0;
    B.Switch[0] = 0.0;
    B.Switch[1] = 0.0;
    B.Switch[2] = 0.0;
    B.TankRelease_m.UnitDelay = 0.0;
    B.StageRelease.UnitDelay = 0.0;
    B.FuelDump_f.UnitDelay = 0.0;
  }

  // states (dwork)
  (void) memset((void *)&DWork, 0,
                sizeof(D_Work));
  DWork.ProtectedRT_Buffer0 = 0.0;
  DWork.ProtectedRT1_Buffer0 = 0.0;
  DWork.VRTracer_LastPos[0] = 0.0;
  DWork.VRTracer_LastPos[1] = 0.0;
  DWork.VRTracer_LastPos[2] = 0.0;
  DWork.TankRelease_m.UnitDelay_DSTATE = 0.0;
  DWork.StageRelease.UnitDelay_DSTATE = 0.0;
  DWork.FuelDump_f.UnitDelay_DSTATE = 0.0;

  // Start for FromWorkspace: '<S3>/FromWs'
  {
    static real_T pTimeValues0[] = { 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0,
      5.0, 5.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 9.0, 9.0, 10.0, 10.0, 11.0, 11.0,
      12.0, 12.0, 13.0, 13.0, 14.0, 14.0, 15.0, 15.0, 16.0, 16.0, 17.0, 17.0,
      18.0, 18.0, 19.0, 19.0, 20.0, 20.0, 21.0, 21.0, 22.0, 22.0, 23.0, 23.0,
      24.0, 24.0, 25.0, 25.0, 26.0, 26.0, 27.0, 27.0, 28.0, 28.0, 29.0, 29.0,
      30.0, 30.0, 31.0, 31.0, 32.0, 32.0, 33.0, 33.0, 34.0, 34.0, 35.0, 35.0,
      36.0, 36.0, 37.0, 37.0, 38.0, 38.0, 39.0, 39.0, 40.0, 40.0, 41.0, 41.0,
      42.0, 42.0, 43.0, 43.0, 44.0, 44.0, 45.0, 45.0, 46.0, 46.0, 47.0, 47.0,
      48.0, 48.0, 49.0, 49.0, 50.0, 50.0, 51.0, 51.0, 52.0, 52.0, 53.0, 53.0,
      54.0, 54.0, 55.0, 55.0, 56.0, 56.0, 57.0, 57.0, 58.0, 58.0, 59.0, 59.0,
      60.0, 60.0, 61.0, 61.0, 62.0, 62.0, 63.0, 63.0, 64.0, 64.0, 65.0, 65.0,
      66.0, 66.0, 67.0, 67.0, 68.0, 68.0, 69.0, 69.0, 70.0, 70.0, 71.0, 71.0,
      72.0, 72.0, 73.0, 73.0, 74.0, 74.0, 75.0, 75.0, 76.0, 76.0, 77.0, 77.0,
      78.0, 78.0, 79.0, 79.0, 80.0, 80.0, 81.0, 81.0, 82.0, 82.0, 83.0, 83.0,
      84.0, 84.0, 85.0, 85.0, 86.0, 86.0, 87.0, 87.0, 88.0, 88.0, 89.0, 89.0,
      90.0, 90.0, 91.0, 91.0, 92.0, 92.0, 93.0, 93.0, 94.0, 94.0, 95.0, 95.0,
      96.0, 96.0, 97.0, 97.0, 98.0, 98.0, 99.0, 99.0, 100.0, 100.0, 101.0, 101.0,
      102.0, 102.0, 103.0, 103.0, 104.0, 104.0, 105.0, 105.0, 106.0, 106.0,
      107.0, 107.0, 108.0, 108.0, 109.0, 109.0, 110.0, 110.0, 111.0, 111.0,
      112.0, 112.0, 113.0, 113.0, 114.0, 114.0, 115.0, 115.0, 116.0, 116.0,
      117.0, 117.0, 118.0, 118.0, 119.0, 119.0, 120.0, 120.0, 121.0, 121.0,
      122.0, 122.0, 123.0, 123.0, 124.0, 124.0, 125.0, 125.0, 126.0, 126.0,
      127.0, 127.0, 128.0, 128.0, 129.0, 129.0, 130.0, 130.0, 131.0, 131.0,
      132.0, 132.0, 132.20000000000002, 132.20000000000002, 133.0, 133.0, 134.0,
      134.0, 135.0, 135.0, 135.20000000000002, 135.20000000000002, 136.0 } ;

    static real_T pDataValues0[] = { 0.0, 0.41876509098130144,
      0.41876509098130144, 0.37449722915350359, 0.37449722915350359,
      0.35042586271206888, 0.35042586271206888, 0.29939870418383219,
      0.29939870418383219, 0.2377169565856021, 0.2377169565856021,
      0.16982746938803861, 0.16982746938803861, 0.10002342220027671,
      0.10002342220027671, 0.059748353506783758, 0.059748353506783758,
      0.028774489528140768, 0.028774489528140768, -0.026763665325260311,
      -0.026763665325260311, -0.080637607699188374, -0.080637607699188374,
      -0.11883176258177786, -0.11883176258177786, -0.13116892092440957,
      -0.13116892092440957, -0.13443398412900875, -0.13443398412900875,
      -0.13846600336297077, -0.13846600336297077, -0.13595664645503036,
      -0.13595664645503036, -0.13439979180577044, -0.13439979180577044,
      -0.12805361314386388, -0.12805361314386388, -0.1102178751773355,
      -0.1102178751773355, -0.0901669547659345, -0.0901669547659345,
      -0.07113435388169953, -0.07113435388169953, -0.059349323972029522,
      -0.059349323972029522, -0.044382766363552317, -0.044382766363552317,
      -0.0177893980341719, -0.0177893980341719, 0.015427557032215322,
      0.015427557032215322, 0.05506299215792354, 0.05506299215792354,
      0.079988546800193516, 0.079988546800193516, 0.11820730584211181,
      0.11820730584211181, 0.1892265103431463, 0.1892265103431463,
      0.15598184773591117, 0.15598184773591117, -0.0064531008508137422,
      -0.0064531008508137422, -0.11571122060800754, -0.11571122060800754,
      -0.16200365941144512, -0.16200365941144512, -0.19604750433841422,
      -0.19604750433841422, -0.24493425324189744, -0.24493425324189744,
      -0.29334493576408027, -0.29334493576408027, -0.34111151169457732,
      -0.34111151169457732, -0.39417465846897604, -0.39417465846897604,
      -0.42912225788416913, -0.42912225788416913, -0.44246769247315587,
      -0.44246769247315587, -0.504378329324954, -0.504378329324954,
      -0.638047386196146, -0.638047386196146, -0.78528657722643569,
      -0.78528657722643569, -0.88127366540918484, -0.88127366540918484,
      -0.90289649569924446, -0.90289649569924446, -0.922291176240865,
      -0.922291176240865, -0.96195754906183328, -0.96195754906183328,
      -0.96434079832595243, -0.96434079832595243, -0.95205655542733547,
      -0.95205655542733547, -0.97045096148762378, -0.97045096148762378,
      -1.0260454813866051, -1.0260454813866051, -1.0506874661717429,
      -1.0506874661717429, -1.0863504159867787, -1.0863504159867787,
      -1.2218710070868095, -1.2218710070868095, -1.4307666744376202,
      -1.4307666744376202, -1.6379766151022181, -1.6379766151022181,
      -1.7575913670946388, -1.7575913670946388, -1.83958700339194,
      -1.83958700339194, -1.9090271471672704, -1.9090271471672704,
      -1.987779340163307, -1.987779340163307, -2.128344099916827,
      -2.128344099916827, -2.2815780614201868, -2.2815780614201868,
      -2.4310266690123434, -2.4310266690123434, -2.5069939668671619,
      -2.5069939668671619, -2.5580582955512448, -2.5580582955512448,
      -2.6171107621899465, -2.6171107621899465, -2.6889566146230228,
      -2.6889566146230228, -2.7980697114367885, -2.7980697114367885,
      -2.894968646130025, -2.894968646130025, -2.9712007783399441,
      -2.9712007783399441, -2.9949005356033691, -2.9949005356033691,
      -3.0001841195298535, -3.0001841195298535, -3.0390856510592386,
      -3.0390856510592386, -3.0810845002664746, -3.0810845002664746,
      -3.1084543505692386, -3.1084543505692386, -3.1275613392550752,
      -3.1275613392550752, -3.1366791771304476, -3.1366791771304476,
      -3.1466411200156172, -3.1466411200156172, -3.1654431969234587,
      -3.1654431969234587, -3.1814777696858827, -3.1814777696858827,
      -3.1906190668032988, -3.1906190668032988, -3.2002234750174807,
      -3.2002234750174807, -3.2143910432857608, -3.2143910432857608,
      -3.2329614217182812, -3.2329614217182812, -3.2602080704143921,
      -3.2602080704143921, -3.286753711879201, -3.286753711879201,
      -3.31922572806253, -3.31922572806253, -3.3449184954182458,
      -3.3449184954182458, -3.3867125237741691, -3.3867125237741691,
      -3.492902649523157, -3.492902649523157, -3.6280315874043003,
      -3.6280315874043003, -3.7643686858398588, -3.7643686858398588,
      -3.830245654459377, -3.830245654459377, -3.9013559548672472,
      -3.9013559548672472, -4.0174946235065976, -4.0174946235065976,
      -4.1054581316897458, -4.1054581316897458, -4.1641459487818064,
      -4.1641459487818064, -4.19164001754403, -4.19164001754403,
      -4.2104116383878214, -4.2104116383878214, -4.2187568860405857,
      -4.2187568860405857, -4.2168950897590483, -4.2168950897590483,
      -4.2166189633654332, -4.2166189633654332, -4.2237471632605956,
      -4.2237471632605956, -4.23517855649206, -4.23517855649206,
      -4.2588342847865093, -4.2588342847865093, -4.29270637779793,
      -4.29270637779793, -4.31334526569538, -4.31334526569538,
      -4.3487697175059008, -4.3487697175059008, -4.4369102184341536,
      -4.4369102184341536, -4.5498658845974163, -4.5498658845974163,
      -4.65462395278582, -4.65462395278582, -4.6943250383389614,
      -4.6943250383389614, -4.7230283687198709, -4.7230283687198709,
      -4.7692012883959034, -4.7692012883959034, -4.8031448453212207,
      -4.8031448453212207, -4.8102351753976222, -4.8102351753976222,
      -4.7941666776799163, -4.7941666776799163, -4.772971434251601,
      -4.772971434251601, -4.75681515044244, -4.75681515044244,
      -4.7489394940199565, -4.7489394940199565, -4.7364246452907821,
      -4.7364246452907821, -4.709584652387317, -4.709584652387317,
      -4.6835829161606686, -4.6835829161606686, -4.6684583763800838,
      -4.6684583763800838, -4.6686580562975371, -4.6686580562975371,
      -4.6686580562975371, -4.6686580562975371, -4.6692974953980384,
      -4.6692974953980384, -4.68351131665029, -4.68351131665029,
      -4.7022661781434918, -4.7022661781434918, -4.71238898038469,
      -4.71238898038469, -4.71238898038469, -4.71238898038469,
      -4.7853981633974474, -4.7853981633974474, -4.8000000000000007,
      -4.8000000000000007, -4.7194746895963169, -4.7194746895963169,
      -4.7154819011748579, -4.7154819011748579, -4.7859136501958091,
      -4.7859136501958091, -4.8000000000000007, -4.8000000000000007,
      -4.7102478943200339, 0.0, 0.017814944589409576, 0.017814944589409576,
      0.018679301008906135, 0.018679301008906135, 0.019201800450699524,
      0.019201800450699524, 0.020453349298241497, 0.020453349298241497,
      0.022286273484789509, 0.022286273484789509, 0.024845684232108756,
      0.024845684232108756, 0.028326169644533383, 0.028326169644533383,
      0.030892722754246149, 0.030892722754246149, 0.033246185480397372,
      0.033246185480397372, 0.03863893646002392, 0.03863893646002392,
      0.04639659597421586, 0.04639659597421586, 0.055403258059842919,
      0.055403258059842919, 0.0609348160934271, 0.0609348160934271,
      0.064866558776546457, 0.064866558776546457, 0.071720695533279422,
      0.071720695533279422, 0.077731099244330526, 0.077731099244330526,
      0.0809445197584413, 0.0809445197584413, 0.083660726901644944,
      0.083660726901644944, 0.085683370749122689, 0.085683370749122689,
      0.08601090123914501, 0.08601090123914501, 0.085276380209478919,
      0.085276380209478919, 0.084310596313974084, 0.084310596313974084,
      0.082945915967614248, 0.082945915967614248, 0.0804882165405354,
      0.0804882165405354, 0.077098061980719779, 0.077098061980719779,
      0.073113345379241856, 0.073113345379241856, 0.070852534779814791,
      0.070852534779814791, 0.06751785227467, 0.06751785227467,
      0.0631677808662583, 0.0631677808662583, 0.072720734894653249,
      0.072720734894653249, 0.1165161002513555, 0.1165161002513555,
      0.18368662182497442, 0.18368662182497442, 0.2428790660193445,
      0.2428790660193445, 0.32363913289260759, 0.32363913289260759,
      0.55019946063900038, 0.55019946063900038, 1.0003253022434231,
      1.0003253022434231, 1.388052485331394, 1.388052485331394,
      1.5454742473363794, 1.5454742473363794, 1.5707963267948966,
      1.5707963267948966, 1.6142440271992062, 1.6142440271992062,
      1.6717602737166986, 1.6717602737166986, 1.6677065165826335,
      1.6677065165826335, 1.6210725987539738, 1.6210725987539738,
      1.580677997135514, 1.580677997135514, 1.5707963267948966,
      1.5707963267948966, 1.562380807424578, 1.562380807424578,
      1.5449098419245779, 1.5449098419245779, 1.5435439689678996,
      1.5435439689678996, 1.555732858067393, 1.555732858067393,
      1.5692346768452075, 1.5692346768452075, 1.5709152917717037,
      1.5709152917717037, 1.5710675376546548, 1.5710675376546548,
      1.575317605089406, 1.575317605089406, 1.5733109521336135,
      1.5733109521336135, 1.5659415802236134, 1.5659415802236134,
      1.560869772225973, 1.560869772225973, 1.5632049789858991,
      1.5632049789858991, 1.5694894495645606, 1.5694894495645606,
      1.5719767605376145, 1.5719767605376145, 1.5761962117220771,
      1.5761962117220771, 1.593382649950901, 1.593382649950901, 1.61103195598746,
      1.61103195598746, 1.6140821713167819, 1.6140821713167819,
      1.5960515048401134, 1.5960515048401134, 1.5707963267948966,
      1.5707963267948966, 1.5595626101032858, 1.5595626101032858,
      1.5301306113043722, 1.5301306113043722, 1.449185727091753,
      1.449185727091753, 1.4005142706025582, 1.4005142706025582,
      1.4514994838065058, 1.4514994838065058, 1.5707963267948966,
      1.5707963267948966, 1.5773160718814951, 1.5773160718814951,
      1.6843344744498498, 1.6843344744498498, 2.0642880500104508,
      2.0642880500104508, 2.3990052257055008, 2.3990052257055008,
      2.5899210352673254, 2.5899210352673254, 2.6385692041357824,
      2.6385692041357824, 2.6741461611813335, 2.6741461611813335,
      2.7253157455127344, 2.7253157455127344, 2.7411992760107413,
      2.7411992760107413, 2.74860368775258, 2.74860368775258, 2.7398251566235854,
      2.7398251566235854, 2.6855466799635614, 2.6855466799635614,
      2.6072290760553756, 2.6072290760553756, 2.5460640200462419,
      2.5460640200462419, 2.5501869393566494, 2.5501869393566494,
      2.5672438632342574, 2.5672438632342574, 2.5596837807466413,
      2.5596837807466413, 2.585090359260322, 2.585090359260322,
      2.6870522223055504, 2.6870522223055504, 2.7802070364551912,
      2.7802070364551912, 2.8380030926719151, 2.8380030926719151,
      2.8547419341927762, 2.8547419341927762, 2.8678298137262463,
      2.8678298137262463, 2.88282426575548, 2.88282426575548, 2.884739435978557,
      2.884739435978557, 2.8768445961667828, 2.8768445961667828,
      2.8726357500988033, 2.8726357500988033, 2.8656407803098038,
      2.8656407803098038, 2.8407973683012013, 2.8407973683012013,
      2.8104625934893783, 2.8104625934893783, 2.7794912653795452,
      2.7794912653795452, 2.7686445189022568, 2.7686445189022568,
      2.7606367883531977, 2.7606367883531977, 2.7428554392814108,
      2.7428554392814108, 2.7334367075043193, 2.7334367075043193,
      2.7278998232658567, 2.7278998232658567, 2.7270317816379643,
      2.7270317816379643, 2.736983237086136, 2.736983237086136,
      2.7482733421761969, 2.7482733421761969, 2.7512488167026348,
      2.7512488167026348, 2.7457765493062061, 2.7457765493062061,
      2.7400586432261611, 2.7400586432261611, 2.735067807151931,
      2.735067807151931, 2.7217922848683895, 2.7217922848683895,
      2.6928538459261766, 2.6928538459261766, 2.64956021501005, 2.64956021501005,
      2.5931364620623314, 2.5931364620623314, 2.535364957167404,
      2.535364957167404, 2.5044636980124162, 2.5044636980124162,
      2.4494648059151265, 2.4494648059151265, 2.2828590320625439,
      2.2828590320625439, 2.0342000965991467, 2.0342000965991467,
      1.8018655077858738, 1.8018655077858738, 1.7555550439619108,
      1.7555550439619108, 1.7555550439619114, 1.7555550439619114,
      1.6931527390914773, 1.6931527390914773, 1.7080055348161012,
      1.7080055348161012, 1.5333, 1.5333, 1.5333, 1.5333, 1.5333, 1.5333, 1.5333,
      1.5333, 1.5333, 1.5333, 1.5333, 1.5333, 1.5333, 1.5333, 1.5333, 1.5333,
      1.5332984849625531, 1.5332984849625531, 1.5332924248127646,
      4.6082949308752177, 6.3386254263133637, 6.3386254263133637,
      7.94451844474286, 7.94451844474286, 9.4793043334531255, 9.4793043334531255,
      10.854099180295128, 10.854099180295128, 12.015572637979441,
      12.015572637979441, 12.910394359216646, 12.910394359216646,
      13.485233996717323, 13.485233996717323, 13.793766080357326,
      13.793766080357326, 13.912667750292004, 13.912667750292004,
      13.801109292065831, 13.801109292065831, 13.427172183791221,
      13.427172183791221, 12.813395969757547, 12.813395969757547,
      11.906509460982207, 11.906509460982207, 10.661433002096405,
      10.661433002096405, 9.1817879362355246, 9.1817879362355246,
      7.6547032343836943, 7.6547032343836943, 6.4018146832011729,
      6.4018146832011729, 5.4041520864141379, 5.4041520864141379,
      4.4630565701379608, 4.4630565701379608, 3.6342324072074281,
      3.6342324072074281, 2.9072558413526641, 2.9072558413526641,
      2.1090290257627275, 2.1090290257627275, 1.4021567439794813,
      1.4021567439794813, 1.1240291045743156, 1.1240291045743156,
      1.352769716817928, 1.352769716817928, 2.0797462826726916,
      2.0797462826726916, 2.8779730982626281, 2.8779730982626281,
      3.7324109824450096, 3.7324109824450096, 4.9062540740218594,
      4.9062540740218594, 5.9007537118674591, 5.9007537118674591,
      5.8399444048100877, 5.8399444048100877, 3.8022413301620652,
      3.8022413301620652, 0.029270916274589, 0.029270916274589,
      -4.2102264777858336, -4.2102264777858336, -10.582852960748379,
      -10.582852960748379, -21.913333491172907, -21.913333491172907,
      -39.05288749544949, -39.05288749544949, -64.559833599087142,
      -64.559833599087142, -97.739557101391242, -97.739557101391242,
      -128.88655292787851, -128.88655292787851, -159.04581795653539,
      -159.04581795653539, -195.92014619889724, -195.92014619889724,
      -238.78003007863998, -238.78003007863998, -290.79144636305887,
      -290.79144636305887, -358.99421134001739, -358.99421134001739,
      -422.51278089784165, -422.51278089784165, -472.30731067946874,
      -472.30731067946874, -522.78186596954322, -522.78186596954322,
      -573.260849751671, -573.260849751671, -625.14528749835745,
      -625.14528749835745, -696.01582444539076, -696.01582444539076,
      -772.65818860515014, -772.65818860515014, -832.61864664966765,
      -832.61864664966765, -890.11067103335688, -890.11067103335688,
      -952.38888097211691, -952.38888097211691, -1018.470514760158,
      -1018.470514760158, -1100.1224480915896, -1100.1224480915896,
      -1202.1461527915062, -1202.1461527915062, -1292.8549725809016,
      -1292.8549725809016, -1361.1808041581278, -1361.1808041581278,
      -1421.3390324677389, -1421.3390324677389, -1474.1668867426613,
      -1474.1668867426613, -1518.6732927114926, -1518.6732927114926,
      -1569.5872057627653, -1569.5872057627653, -1626.7300629056224,
      -1626.7300629056224, -1669.2510002664669, -1669.2510002664669,
      -1697.7509296132769, -1697.7509296132769, -1718.9658445411633,
      -1718.9658445411633, -1733.7155080201051, -1733.7155080201051,
      -1743.9387543752764, -1743.9387543752764, -1754.9986622093779,
      -1754.9986622093779, -1765.2908346571357, -1765.2908346571357,
      -1770.8908101204549, -1770.8908101204549, -1774.0087142651118,
      -1774.0087142651118, -1775.6104975231378, -1775.6104975231378,
      -1776.2725857143994, -1776.2725857143994, -1776.5719589374885,
      -1776.5719589374885, -1776.2055824417166, -1776.2055824417166,
      -1774.5407990442573, -1774.5407990442573, -1771.9323592928108,
      -1771.9323592928108, -1769.4269531291991, -1769.4269531291991,
      -1767.0780017249626, -1767.0780017249626, -1764.1539805842806,
      -1764.1539805842806, -1760.4773579473049, -1760.4773579473049,
      -1755.4425081675708, -1755.4425081675708, -1747.5297314221712,
      -1747.5297314221712, -1736.6760837968668, -1736.6760837968668,
      -1726.9901439678379, -1726.9901439678379, -1718.1641702157283,
      -1718.1641702157283, -1706.5434376521202, -1706.5434376521202,
      -1691.8624755822823, -1691.8624755822823, -1673.43884684347,
      -1673.43884684347, -1647.2500580202543, -1647.2500580202543,
      -1613.1824640271416, -1613.1824640271416, -1574.7380584003918,
      -1574.7380584003918, -1532.2982359352732, -1532.2982359352732,
      -1486.2443914270532, -1486.2443914270532, -1447.9170512180108,
      -1447.9170512180108, -1418.1539544610457, -1418.1539544610457,
      -1386.740386937807, -1386.740386937807, -1353.997143666026,
      -1353.997143666026, -1320.4147601073375, -1320.4147601073375,
      -1275.6557248360555, -1275.6557248360555, -1220.0163982755603,
      -1220.0163982755603, -1164.9766788801744, -1164.9766788801744,
      -1113.4447276719429, -1113.4447276719429, -1073.2557365513958,
      -1073.2557365513958, -1042.4485336953467, -1042.4485336953467,
      -1013.7079930487221, -1013.7079930487221, -986.8899844642267,
      -986.8899844642267, -959.3783158288403, -959.3783158288403,
      -922.9517335452349, -922.9517335452349, -882.38893941450169,
      -882.38893941450169, -850.63977436355663, -850.63977436355663,
      -823.46729927188358, -823.46729927188358, -793.80431635290756,
      -793.80431635290756, -761.009169463959, -761.009169463959,
      -721.072084166235, -721.072084166235, -667.001574505565, -667.001574505565,
      -613.69740680316886, -613.69740680316886, -571.33288785061893,
      -571.33288785061893, -529.006952878784, -529.006952878784,
      -484.078081647012, -484.078081647012, -437.35777554143715,
      -437.35777554143715, -383.90155434328051, -383.90155434328051,
      -330.445333145124, -330.445333145124, -283.09508157996959,
      -283.09508157996959, -236.39758650039371, -236.39758650039371,
      -191.66137153340139, -191.66137153340139, -147.42174019699584,
      -147.42174019699584, -103.18210886059029, -103.18210886059029,
      -61.737820578376713, -61.737820578376713, -54.292699716195784,
      -54.292699716195784, -24.512216267476589, -24.512216267476589,
      8.76259631725853, 8.76259631725853, 36.109703539517056, 36.109703539517056,
      46.399283568941428, 46.399283568941428, 87.557603686635517,
      -5.8479532163742078, -9.7355310675017659, -9.7355310675017659,
      -13.821294408402991, -13.821294408402991, -18.020306600603462,
      -18.020306600603462, -22.474128708227227, -22.474128708227227,
      -27.267697369748731, -27.267697369748731, -32.485949223642407,
      -32.485949223642407, -38.213820908382687, -38.213820908382687,
      -43.371533862381035, -43.371533862381035, -47.502583773295548,
      -47.502583773295548, -51.669868761682011, -51.669868761682011,
      -56.297067759454919, -56.297067759454919, -61.437818306392522,
      -61.437818306392522, -68.312003489598638, -68.312003489598638,
      -77.51776249419305, -77.51776249419305, -88.135362419660339,
      -88.135362419660339, -99.29821573972967, -99.29821573972967,
      -108.56412058595782, -108.56412058595782, -116.312464959773,
      -116.312464959773, -124.81636345884266, -124.81636345884266,
      -133.98354461967983, -133.98354461967983, -144.1860687438456,
      -144.1860687438456, -157.61990981786084, -157.61990981786084,
      -173.53617956176373, -173.53617956176373, -189.16899070274172,
      -189.16899070274172, -203.99456963252561, -203.99456963252561,
      -217.18385837385688, -217.18385837385688, -227.1418301653386,
      -227.1418301653386, -234.33643195828907, -234.33643195828907,
      -240.46558933084896, -240.46558933084896, -246.78953686466443,
      -246.78953686466443, -256.21267534905536, -256.21267534905536,
      -273.74425619616477, -273.74425619616477, -296.82956855258254,
      -296.82956855258254, -318.17665598567294, -318.17665598567294,
      -343.67197390167871, -343.67197390167871, -381.18276291763539,
      -381.18276291763539, -429.46483351273241, -429.46483351273241,
      -490.78795620479309, -490.78795620479309, -563.302576087834,
      -563.302576087834, -629.04146186853279, -629.04146186853279,
      -683.67769447493981, -683.67769447493981, -733.40618055861967,
      -733.40618055861967, -776.275630646523, -776.275630646523,
      -819.16080808164315, -819.16080808164315, -872.96197767228637,
      -872.96197767228637, -921.09941990471293, -921.09941990471293,
      -955.81575766713217, -955.81575766713217, -990.82773458697011,
      -990.82773458697011, -1026.7691845327956, -1026.7691845327956,
      -1062.2915503835125, -1062.2915503835125, -1105.2324349999105,
      -1105.2324349999105, -1149.1260064952305, -1149.1260064952305,
      -1180.6816907135571, -1180.6816907135571, -1201.5979270586345,
      -1201.5979270586345, -1210.3761737974235, -1210.3761737974235,
      -1205.9300999139632, -1205.9300999139632, -1190.4980174297143,
      -1190.4980174297143, -1162.3949126510686, -1162.3949126510686,
      -1130.4883062349872, -1130.4883062349872, -1100.2227813647798,
      -1100.2227813647798, -1062.711800358411, -1062.711800358411,
      -1017.2328895690247, -1017.2328895690247, -965.51212314051691,
      -965.51212314051691, -896.35269976438235, -896.35269976438235,
      -809.80299216204321, -809.80299216204321, -736.30454255243308,
      -736.30454255243308, -677.7001370054179, -677.7001370054179,
      -618.39182735231111, -618.39182735231111, -559.8030370182081,
      -559.8030370182081, -500.38637877382882, -500.38637877382882,
      -425.53257760423821, -425.53257760423821, -353.23511092781285,
      -353.23511092781285, -298.7964158990784, -298.7964158990784,
      -247.33065605920666, -247.33065605920666, -199.01204170905518,
      -199.01204170905518, -151.82866852343525, -151.82866852343525,
      -90.9001556097973, -90.9001556097973, -18.328932539303064,
      -18.328932539303064, 51.458480367881805, 51.458480367881805,
      116.82262297802939, 116.82262297802939, 167.88486382749727,
      167.88486382749727, 207.90236939749616, 207.90236939749616,
      247.99740365263548, 247.99740365263548, 288.12474573652645,
      288.12474573652645, 330.37232984569687, 330.37232984569687,
      384.49924215868197, 384.49924215868197, 444.956732446975, 444.956732446975,
      491.93597350135258, 491.93597350135258, 527.2186935435542,
      527.2186935435542, 558.92482314693541, 558.92482314693541,
      586.68642427174689, 586.68642427174689, 612.34220733143059,
      612.34220733143059, 644.16047222774955, 644.16047222774955,
      680.02105824350429, 680.02105824350429, 712.06823164878892,
      712.06823164878892, 741.53675666571166, 741.53675666571166,
      769.66139751638127, 769.66139751638127, 791.64430221070563,
      791.64430221070563, 807.980454746067, 807.980454746067, 824.88292241545219,
      824.88292241545219, 842.57952809897927, 842.57952809897927,
      860.74164391391969, 860.74164391391969, 884.53755310305462,
      884.53755310305462, 913.30699783499824, 913.30699783499824,
      940.13593189607, 940.13593189607, 963.12907138355445, 963.12907138355445,
      980.07542054714941, 980.07542054714941, 991.79881025954569,
      991.79881025954569, 999.92277128892533, 999.92277128892533,
      1004.3201020910022, 1004.3201020910022, 1005.911084378518,
      1005.911084378518, 1006.5691636297734, 1006.5691636297734,
      1006.137584026488, 1006.137584026488, 1004.3318975634102,
      1004.3318975634102, 1001.8590430261623, 1001.8590430261623,
      998.94733496616266, 998.94733496616266, 996.25942882500931,
      996.25942882500931, 993.83697781818671, 993.83697781818671,
      991.433250552957, 991.433250552957, 989.48408777901625, 989.48408777901625,
      988.4656322649505, 988.4656322649505, 988.58432838055933,
      988.58432838055933, 989.878910427377, 989.878910427377, 991.93268305443053,
      991.93268305443053, 994.27186434098019, 994.27186434098019,
      996.61104562752985, 996.61104562752985, 998.652702139473, 998.652702139473,
      1000.001591675546, 1000.001591675546, 1000.4544630015271,
      1000.4544630015271, 1000.4544630015271, 1000.4544630015271,
      1000.4544630015271, 1000.4544630015271, 1000.3005981794239,
      1000.3005981794239, 1000.2478433350539, 1000.2478433350539,
      1000.0368239575733, 1000.0368239575733, 999.93390726976838,
      999.93390726976838, 999.88984544961386, 999.88984544961386,
      999.91187635969106, 999.91187635969106, 1000.0, 0.0, 238.83418401927727,
      238.83418401927727, 473.82790161180975, 473.82790161180975,
      706.627066960488, 706.627066960488, 934.48848976049453, 934.48848976049453,
      1155.7662558289385, 1155.7662558289385, 1368.8144509829292,
      1368.8144509829292, 1571.987161039576, 1571.987161039576,
      1739.1879956908977, 1739.1879956908977, 1863.4500084748431,
      1863.4500084748431, 1971.2869080588416, 1971.2869080588416,
      2071.2716641032416, 2071.2716641032416, 2164.6229115772194,
      2164.6229115772194, 2278.2716398435027, 2278.2716398435027,
      2421.28127268735, 2421.28127268735, 2570.4964570329994, 2570.4964570329994,
      2715.1505439327766, 2715.1505439327766, 2830.4121571037408,
      2830.4121571037408, 2923.5750342421434, 2923.5750342421434,
      3023.1843937697222, 3023.1843937697222, 3129.9367163790193,
      3129.9367163790193, 3249.5898448793996, 3249.5898448793996,
      3408.8300113444957, 3408.8300113444957, 3600.4657828381169,
      3600.4657828381169, 3794.3016946679513, 3794.3016946679513,
      3986.2384688402558, 3986.2384688402558, 4166.585340339876,
      4166.585340339876, 4307.345173874779, 4307.345173874779, 4414.489404298698,
      4414.489404298698, 4513.1512299276365, 4513.1512299276365,
      4601.0268336884737, 4601.0268336884737, 4681.5363279821386,
      4681.5363279821386, 4776.5386379390748, 4776.5386379390748,
      4870.94703061685, 4870.94703061685, 4935.8303007866507, 4935.8303007866507,
      4978.6743680235559, 4978.6743680235559, 5003.8165627566259,
      5003.8165627566259, 5013.2848952551167, 5013.2848952551167,
      5014.9670545436784, 5014.9670545436784, 5014.9670545436784,
      5014.9670545436784, 5011.8044907707244, 5011.8044907707244,
      5005.4820831644229, 5005.4820831644229, 4999.46368486074, 4999.46368486074,
      4996.4133770985045, 4996.4133770985045, 4995.7472160565922,
      4995.7472160565922, 4995.7472160565922, 4995.7472160565922,
      4996.417934636157, 4996.417934636157, 4997.9896442506742,
      4997.9896442506742, 4999.6641432883034, 4999.6641432883034,
      5000.5976526577151, 5000.5976526577151, 5000.6958485283467,
      5000.6958485283467, 5000.6859905354413, 5000.6859905354413,
      5000.6620367691812, 5000.6620367691812, 5000.3556862052246,
      5000.3556862052246, 5000.2018446085676, 5000.2018446085676,
      5000.5071805819007, 5000.5071805819007, 5001.1646481524731,
      5001.1646481524731, 5001.7954819698843, 5001.7954819698843,
      5001.9337804185434, 5001.9337804185434, 5001.820273687701,
      5001.820273687701, 5001.4167418437373, 5001.4167418437373,
      4999.81521449166, 4999.81521449166, 4997.0089812252736, 4997.0089812252736,
      4994.0535754972052, 4994.0535754972052, 4991.8842175052187,
      4991.8842175052187, 4991.8842175052187, 4991.8842175052187,
      4992.8381352796277, 4992.8381352796277, 4995.4896548715151,
      4995.4896548715151, 5003.1877079675342, 5003.1877079675342,
      5013.5762208692759, 5013.5762208692759, 5020.802913160951,
      5020.802913160951, 5020.802913160951, 5020.802913160951,
      5020.3267930180409, 5020.3267930180409, 5014.0864707749788,
      5014.0864707749788, 4986.3532288194947, 4986.3532288194947,
      4933.680790345622, 4933.680790345622, 4857.0031185468424,
      4857.0031185468424, 4746.2699366884381, 4746.2699366884381,
      4602.4937187908927, 4602.4937187908927, 4444.5995786781386,
      4444.5995786781386, 4290.0453248603344, 4290.0453248603344,
      4166.722996659114, 4166.722996659114, 4072.37505511064, 4072.37505511064,
      3990.4204229175475, 3990.4204229175475, 3922.3300971887038,
      3922.3300971887038, 3859.539360441905, 3859.539360441905,
      3778.0879481171969, 3778.0879481171969, 3683.1690715240757,
      3683.1690715240757, 3610.2592980411655, 3610.2592980411655,
      3551.7950606139138, 3551.7950606139138, 3482.6915532485118,
      3482.6915532485118, 3399.6079327921152, 3399.6079327921152,
      3298.7836731884213, 3298.7836731884213, 3159.0826453260511,
      3159.0826453260511, 2982.9409948010939, 2982.9409948010939,
      2793.8616370956979, 2793.8616370956979, 2597.1490557978527,
      2597.1490557978527, 2398.1077344955465, 2398.1077344955465,
      2237.8087623579167, 2237.8087623579167, 2117.9132031974532,
      2117.9132031974532, 2002.9187017846109, 2002.9187017846109,
      1894.6558131562974, 1894.6558131562974, 1793.8674067702691,
      1793.8674067702691, 1664.3076418205474, 1664.3076418205474,
      1507.9185981752182, 1507.9185981752182, 1362.5836700618195,
      1362.5836700618195, 1232.0941727690831, 1232.0941727690831,
      1132.7481600611118, 1132.7481600611118, 1057.8445246935014,
      1057.8445246935014, 988.10126511631915, 988.10126511631915,
      922.60720489750656, 922.60720489750656, 855.63145942867754,
      855.63145942867754, 768.44521435654622, 768.44521435654622,
      672.90861467387822, 672.90861467387822, 599.04091789638971,
      599.04091789638971, 537.90997397414583, 537.90997397414583,
      476.00859569945641, 476.00859569945641, 414.61864820186651,
      414.61864820186651, 349.13322488347529, 349.13322488347529,
      271.06822753905976, 271.06822753905976, 198.99626302395365,
      198.99626302395365, 147.87338676747203, 147.87338676747203,
      111.34081225111692, 111.34081225111692, 88.880751325765019,
      88.880751325765019, 77.878182326776056, 77.878182326776056,
      67.878182326776056, 67.878182326776056, 57.878182326776042,
      57.878182326776042, 52.0500788270874, 52.0500788270874, 45.59954907462388,
      45.59954907462388, 36.602532227798427, 36.602532227798427,
      26.602532227798427, 26.602532227798427, 16.602532227798427,
      16.602532227798427, 7.1303963586076708, 7.1303963586076708,
      5.9043170868859534, 5.9043170868859534, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
      1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } ;

    DWork.FromWs_PWORK.TimePtr = (void *) pTimeValues0;
    DWork.FromWs_PWORK.DataPtr = (void *) pDataValues0;
    DWork.FromWs_IWORK.PrevIndex = 0;
  }

  // Start for Enabled SubSystem: '<S5>/StageRelease'
  FuelDump_Start(&B.StageRelease, &DWork.StageRelease, (rtP_FuelDump *)
                 &P.StageRelease);

  // End of Start for SubSystem: '<S5>/StageRelease'

  // Start for Enabled SubSystem: '<S5>/FuelDump'
  FuelDump_Start(&B.FuelDump_f, &DWork.FuelDump_f, (rtP_FuelDump *)&P.FuelDump_f);

  // End of Start for SubSystem: '<S5>/FuelDump'

  // Start for Enabled SubSystem: '<S5>/TankRelease'
  TankRelease_Start(&B.TankRelease_m, &DWork.TankRelease_m, (rtP_TankRelease *)
                    &P.TankRelease_m);

  // End of Start for SubSystem: '<S5>/TankRelease'

  // InitializeConditions for Chart: '<Root>/launchAbortController'
  launchAbortController_Init(&B.sf_launchAbortController,
    &DWork.sf_launchAbortController);
}

// Model terminate function
void sf_launchabortModelClass::terminate()
{
  // (no terminate code required)
}

// Constructor
sf_launchabortModelClass::sf_launchabortModelClass()
{
  static const Parameters P_temp = {
    //  Expression: [0 0 1]
    //  Referenced by: '<Root>/Blue'

    { 0.0, 0.0, 1.0 },

    //  Expression: [1 0 0]
    //  Referenced by: '<Root>/Red'

    { 1.0, 0.0, 0.0 },
    1.0,                               // Expression: 1
                                       //  Referenced by: '<Root>/Markers Off'

    0.0,                               // Expression: 0
                                       //  Referenced by: '<Root>/Markers On'


    //  Expression: [0, 0, 1]
    //  Referenced by: '<S7>/rotVector'

    { 0.0, 0.0, 1.0 },

    //  Expression: [1, 0, 0]
    //  Referenced by: '<S6>/rotVector'

    { 1.0, 0.0, 0.0 },

    //  Expression: [0,1,0]
    //  Referenced by: '<S2>/Gain'

    { 0.0, 1.0, 0.0 },

    //  Expression: [0,1,0]
    //  Referenced by: '<S2>/Gain2'

    { 0.0, 1.0, 0.0 },

    //  Expression: [0,1,0]
    //  Referenced by: '<S2>/Gain1'

    { 0.0, 1.0, 0.0 },
    1U,                                // Computed Parameter: ManualSwitch_CurrentSetting
                                       //  Referenced by: '<Root>/Manual Switch'


    // Start of '<S5>/TankRelease'
    {
      0.0,                             // Expression: 0
                                       //  Referenced by: '<S10>/Out1'

      -2.0,                            // Expression: -2
                                       //  Referenced by: '<S10>/Constant'

      0.0                              // Expression: 0
                                       //  Referenced by: '<S10>/Unit Delay'

    }
    // End of '<S5>/TankRelease'
    ,

    // Start of '<S5>/StageRelease'
    {
      0.0,                             // Expression: 0
                                       //  Referenced by: '<S9>/Out2'

      -2.0,                            // Expression: -2
                                       //  Referenced by: '<S9>/Constant1'

      0.0                              // Expression: 0
                                       //  Referenced by: '<S9>/Unit Delay'

    }
    // End of '<S5>/StageRelease'
    ,

    // Start of '<S5>/FuelDump'
    {
      0.0,                             // Expression: 0
                                       //  Referenced by: '<S8>/Out2'

      -2.0,                            // Expression: -2
                                       //  Referenced by: '<S8>/Constant1'

      0.0                              // Expression: 0
                                       //  Referenced by: '<S8>/Unit Delay'

    }
    // End of '<S5>/FuelDump'
  };                                   // Modifiable parameters

  // Initialize tunable parameters
  P = P_temp;
}

// Destructor
sf_launchabortModelClass::~sf_launchabortModelClass()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
RT_MODEL * sf_launchabortModelClass::getRTM()
{
  return (&M);
}

//
// File trailer for generated code.
//
// [EOF]
//
